# source: http://localhost:4469
# timestamp: Tue Aug 28 2018 12:12:01 GMT-0400 (Eastern Daylight Time)

type Account implements Node {
  id: ID!
  email: String!
  password: String!
  rememberMe: Boolean!
  accountState: State
  accountType: AccountType
  country: String
  roles(where: RoleWhereInput, orderBy: RoleOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Role!]
  domain(where: DomainWhereInput): Domain
  profileID: ID
}

"""A connection to a list of items."""
type AccountConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [AccountEdge]!
  aggregate: AggregateAccount!
}

input AccountCreateInput {
  email: String!
  password: String!
  rememberMe: Boolean
  accountState: State
  accountType: AccountType
  country: String
  profileID: ID
  roles: RoleCreateManyInput
  domain: DomainCreateOneInput
}

input AccountCreateOneInput {
  create: AccountCreateInput
  connect: AccountWhereUniqueInput
}

"""An edge in a connection."""
type AccountEdge {
  """The item at the end of the edge."""
  node: Account!

  """A cursor for use in pagination."""
  cursor: String!
}

enum AccountOrderByInput {
  id_ASC
  id_DESC
  email_ASC
  email_DESC
  password_ASC
  password_DESC
  rememberMe_ASC
  rememberMe_DESC
  accountState_ASC
  accountState_DESC
  accountType_ASC
  accountType_DESC
  country_ASC
  country_DESC
  profileID_ASC
  profileID_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type AccountPreviousValues {
  id: ID!
  email: String!
  password: String!
  rememberMe: Boolean!
  accountState: State
  accountType: AccountType
  country: String
  profileID: ID
}

type AccountSubscriptionPayload {
  mutation: MutationType!
  node: Account
  updatedFields: [String!]
  previousValues: AccountPreviousValues
}

input AccountSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [AccountSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [AccountSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [AccountSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: AccountWhereInput
}

enum AccountType {
  STUDENT
  TEACHER
  PARENT
  OTHER
}

input AccountUpdateDataInput {
  email: String
  password: String
  rememberMe: Boolean
  accountState: State
  accountType: AccountType
  country: String
  profileID: ID
  roles: RoleUpdateManyInput
  domain: DomainUpdateOneInput
}

input AccountUpdateInput {
  email: String
  password: String
  rememberMe: Boolean
  accountState: State
  accountType: AccountType
  country: String
  profileID: ID
  roles: RoleUpdateManyInput
  domain: DomainUpdateOneInput
}

input AccountUpdateOneInput {
  create: AccountCreateInput
  connect: AccountWhereUniqueInput
  disconnect: Boolean
  delete: Boolean
  update: AccountUpdateDataInput
  upsert: AccountUpsertNestedInput
}

input AccountUpsertNestedInput {
  update: AccountUpdateDataInput!
  create: AccountCreateInput!
}

input AccountWhereInput {
  """Logical AND on all given filters."""
  AND: [AccountWhereInput!]

  """Logical OR on all given filters."""
  OR: [AccountWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [AccountWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  email: String

  """All values that are not equal to given value."""
  email_not: String

  """All values that are contained in given list."""
  email_in: [String!]

  """All values that are not contained in given list."""
  email_not_in: [String!]

  """All values less than the given value."""
  email_lt: String

  """All values less than or equal the given value."""
  email_lte: String

  """All values greater than the given value."""
  email_gt: String

  """All values greater than or equal the given value."""
  email_gte: String

  """All values containing the given string."""
  email_contains: String

  """All values not containing the given string."""
  email_not_contains: String

  """All values starting with the given string."""
  email_starts_with: String

  """All values not starting with the given string."""
  email_not_starts_with: String

  """All values ending with the given string."""
  email_ends_with: String

  """All values not ending with the given string."""
  email_not_ends_with: String
  password: String

  """All values that are not equal to given value."""
  password_not: String

  """All values that are contained in given list."""
  password_in: [String!]

  """All values that are not contained in given list."""
  password_not_in: [String!]

  """All values less than the given value."""
  password_lt: String

  """All values less than or equal the given value."""
  password_lte: String

  """All values greater than the given value."""
  password_gt: String

  """All values greater than or equal the given value."""
  password_gte: String

  """All values containing the given string."""
  password_contains: String

  """All values not containing the given string."""
  password_not_contains: String

  """All values starting with the given string."""
  password_starts_with: String

  """All values not starting with the given string."""
  password_not_starts_with: String

  """All values ending with the given string."""
  password_ends_with: String

  """All values not ending with the given string."""
  password_not_ends_with: String
  rememberMe: Boolean

  """All values that are not equal to given value."""
  rememberMe_not: Boolean
  accountState: State

  """All values that are not equal to given value."""
  accountState_not: State

  """All values that are contained in given list."""
  accountState_in: [State!]

  """All values that are not contained in given list."""
  accountState_not_in: [State!]
  accountType: AccountType

  """All values that are not equal to given value."""
  accountType_not: AccountType

  """All values that are contained in given list."""
  accountType_in: [AccountType!]

  """All values that are not contained in given list."""
  accountType_not_in: [AccountType!]
  country: String

  """All values that are not equal to given value."""
  country_not: String

  """All values that are contained in given list."""
  country_in: [String!]

  """All values that are not contained in given list."""
  country_not_in: [String!]

  """All values less than the given value."""
  country_lt: String

  """All values less than or equal the given value."""
  country_lte: String

  """All values greater than the given value."""
  country_gt: String

  """All values greater than or equal the given value."""
  country_gte: String

  """All values containing the given string."""
  country_contains: String

  """All values not containing the given string."""
  country_not_contains: String

  """All values starting with the given string."""
  country_starts_with: String

  """All values not starting with the given string."""
  country_not_starts_with: String

  """All values ending with the given string."""
  country_ends_with: String

  """All values not ending with the given string."""
  country_not_ends_with: String
  profileID: ID

  """All values that are not equal to given value."""
  profileID_not: ID

  """All values that are contained in given list."""
  profileID_in: [ID!]

  """All values that are not contained in given list."""
  profileID_not_in: [ID!]

  """All values less than the given value."""
  profileID_lt: ID

  """All values less than or equal the given value."""
  profileID_lte: ID

  """All values greater than the given value."""
  profileID_gt: ID

  """All values greater than or equal the given value."""
  profileID_gte: ID

  """All values containing the given string."""
  profileID_contains: ID

  """All values not containing the given string."""
  profileID_not_contains: ID

  """All values starting with the given string."""
  profileID_starts_with: ID

  """All values not starting with the given string."""
  profileID_not_starts_with: ID

  """All values ending with the given string."""
  profileID_ends_with: ID

  """All values not ending with the given string."""
  profileID_not_ends_with: ID
  roles_every: RoleWhereInput
  roles_some: RoleWhereInput
  roles_none: RoleWhereInput
  domain: DomainWhereInput
}

input AccountWhereUniqueInput {
  id: ID
  email: String
  profileID: ID
}

type AggregateAccount {
  count: Int!
}

type AggregateAuthPayload {
  count: Int!
}

type AggregateDomain {
  count: Int!
}

type AggregateRole {
  count: Int!
}

type AuthPayload {
  token: String
  refreshToken: String
  account(where: AccountWhereInput): Account
  status: String
}

"""A connection to a list of items."""
type AuthPayloadConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [AuthPayloadEdge]!
  aggregate: AggregateAuthPayload!
}

input AuthPayloadCreateInput {
  token: String
  refreshToken: String
  status: String
  account: AccountCreateOneInput
}

"""An edge in a connection."""
type AuthPayloadEdge {
  """The item at the end of the edge."""
  node: AuthPayload!

  """A cursor for use in pagination."""
  cursor: String!
}

enum AuthPayloadOrderByInput {
  token_ASC
  token_DESC
  refreshToken_ASC
  refreshToken_DESC
  status_ASC
  status_DESC
  id_ASC
  id_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type AuthPayloadPreviousValues {
  token: String
  refreshToken: String
  status: String
}

type AuthPayloadSubscriptionPayload {
  mutation: MutationType!
  node: AuthPayload
  updatedFields: [String!]
  previousValues: AuthPayloadPreviousValues
}

input AuthPayloadSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [AuthPayloadSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [AuthPayloadSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [AuthPayloadSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: AuthPayloadWhereInput
}

input AuthPayloadUpdateInput {
  token: String
  refreshToken: String
  status: String
  account: AccountUpdateOneInput
}

input AuthPayloadWhereInput {
  """Logical AND on all given filters."""
  AND: [AuthPayloadWhereInput!]

  """Logical OR on all given filters."""
  OR: [AuthPayloadWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [AuthPayloadWhereInput!]
  token: String

  """All values that are not equal to given value."""
  token_not: String

  """All values that are contained in given list."""
  token_in: [String!]

  """All values that are not contained in given list."""
  token_not_in: [String!]

  """All values less than the given value."""
  token_lt: String

  """All values less than or equal the given value."""
  token_lte: String

  """All values greater than the given value."""
  token_gt: String

  """All values greater than or equal the given value."""
  token_gte: String

  """All values containing the given string."""
  token_contains: String

  """All values not containing the given string."""
  token_not_contains: String

  """All values starting with the given string."""
  token_starts_with: String

  """All values not starting with the given string."""
  token_not_starts_with: String

  """All values ending with the given string."""
  token_ends_with: String

  """All values not ending with the given string."""
  token_not_ends_with: String
  refreshToken: String

  """All values that are not equal to given value."""
  refreshToken_not: String

  """All values that are contained in given list."""
  refreshToken_in: [String!]

  """All values that are not contained in given list."""
  refreshToken_not_in: [String!]

  """All values less than the given value."""
  refreshToken_lt: String

  """All values less than or equal the given value."""
  refreshToken_lte: String

  """All values greater than the given value."""
  refreshToken_gt: String

  """All values greater than or equal the given value."""
  refreshToken_gte: String

  """All values containing the given string."""
  refreshToken_contains: String

  """All values not containing the given string."""
  refreshToken_not_contains: String

  """All values starting with the given string."""
  refreshToken_starts_with: String

  """All values not starting with the given string."""
  refreshToken_not_starts_with: String

  """All values ending with the given string."""
  refreshToken_ends_with: String

  """All values not ending with the given string."""
  refreshToken_not_ends_with: String
  status: String

  """All values that are not equal to given value."""
  status_not: String

  """All values that are contained in given list."""
  status_in: [String!]

  """All values that are not contained in given list."""
  status_not_in: [String!]

  """All values less than the given value."""
  status_lt: String

  """All values less than or equal the given value."""
  status_lte: String

  """All values greater than the given value."""
  status_gt: String

  """All values greater than or equal the given value."""
  status_gte: String

  """All values containing the given string."""
  status_contains: String

  """All values not containing the given string."""
  status_not_contains: String

  """All values starting with the given string."""
  status_starts_with: String

  """All values not starting with the given string."""
  status_not_starts_with: String

  """All values ending with the given string."""
  status_ends_with: String

  """All values not ending with the given string."""
  status_not_ends_with: String
  account: AccountWhereInput
}

type BatchPayload {
  """The number of nodes that have been affected by the Batch operation."""
  count: Long!
}

type Domain implements Node {
  id: ID!
  domain: String!
  desc: String!
}

"""A connection to a list of items."""
type DomainConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [DomainEdge]!
  aggregate: AggregateDomain!
}

input DomainCreateInput {
  domain: String!
  desc: String!
}

input DomainCreateOneInput {
  create: DomainCreateInput
  connect: DomainWhereUniqueInput
}

"""An edge in a connection."""
type DomainEdge {
  """The item at the end of the edge."""
  node: Domain!

  """A cursor for use in pagination."""
  cursor: String!
}

enum DomainOrderByInput {
  id_ASC
  id_DESC
  domain_ASC
  domain_DESC
  desc_ASC
  desc_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type DomainPreviousValues {
  id: ID!
  domain: String!
  desc: String!
}

type DomainSubscriptionPayload {
  mutation: MutationType!
  node: Domain
  updatedFields: [String!]
  previousValues: DomainPreviousValues
}

input DomainSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [DomainSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [DomainSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [DomainSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: DomainWhereInput
}

input DomainUpdateDataInput {
  domain: String
  desc: String
}

input DomainUpdateInput {
  domain: String
  desc: String
}

input DomainUpdateOneInput {
  create: DomainCreateInput
  connect: DomainWhereUniqueInput
  disconnect: Boolean
  delete: Boolean
  update: DomainUpdateDataInput
  upsert: DomainUpsertNestedInput
}

input DomainUpsertNestedInput {
  update: DomainUpdateDataInput!
  create: DomainCreateInput!
}

input DomainWhereInput {
  """Logical AND on all given filters."""
  AND: [DomainWhereInput!]

  """Logical OR on all given filters."""
  OR: [DomainWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [DomainWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  domain: String

  """All values that are not equal to given value."""
  domain_not: String

  """All values that are contained in given list."""
  domain_in: [String!]

  """All values that are not contained in given list."""
  domain_not_in: [String!]

  """All values less than the given value."""
  domain_lt: String

  """All values less than or equal the given value."""
  domain_lte: String

  """All values greater than the given value."""
  domain_gt: String

  """All values greater than or equal the given value."""
  domain_gte: String

  """All values containing the given string."""
  domain_contains: String

  """All values not containing the given string."""
  domain_not_contains: String

  """All values starting with the given string."""
  domain_starts_with: String

  """All values not starting with the given string."""
  domain_not_starts_with: String

  """All values ending with the given string."""
  domain_ends_with: String

  """All values not ending with the given string."""
  domain_not_ends_with: String
  desc: String

  """All values that are not equal to given value."""
  desc_not: String

  """All values that are contained in given list."""
  desc_in: [String!]

  """All values that are not contained in given list."""
  desc_not_in: [String!]

  """All values less than the given value."""
  desc_lt: String

  """All values less than or equal the given value."""
  desc_lte: String

  """All values greater than the given value."""
  desc_gt: String

  """All values greater than or equal the given value."""
  desc_gte: String

  """All values containing the given string."""
  desc_contains: String

  """All values not containing the given string."""
  desc_not_contains: String

  """All values starting with the given string."""
  desc_starts_with: String

  """All values not starting with the given string."""
  desc_not_starts_with: String

  """All values ending with the given string."""
  desc_ends_with: String

  """All values not ending with the given string."""
  desc_not_ends_with: String
}

input DomainWhereUniqueInput {
  id: ID
}

"""
The `Long` scalar type represents non-fractional signed whole numeric values.
Long can represent values between -(2^63) and 2^63 - 1.
"""
scalar Long

type Mutation {
  createAuthPayload(data: AuthPayloadCreateInput!): AuthPayload!
  createAccount(data: AccountCreateInput!): Account!
  createRole(data: RoleCreateInput!): Role!
  createDomain(data: DomainCreateInput!): Domain!
  updateAccount(data: AccountUpdateInput!, where: AccountWhereUniqueInput!): Account
  updateRole(data: RoleUpdateInput!, where: RoleWhereUniqueInput!): Role
  updateDomain(data: DomainUpdateInput!, where: DomainWhereUniqueInput!): Domain
  deleteAccount(where: AccountWhereUniqueInput!): Account
  deleteRole(where: RoleWhereUniqueInput!): Role
  deleteDomain(where: DomainWhereUniqueInput!): Domain
  upsertAccount(where: AccountWhereUniqueInput!, create: AccountCreateInput!, update: AccountUpdateInput!): Account!
  upsertRole(where: RoleWhereUniqueInput!, create: RoleCreateInput!, update: RoleUpdateInput!): Role!
  upsertDomain(where: DomainWhereUniqueInput!, create: DomainCreateInput!, update: DomainUpdateInput!): Domain!
  updateManyAuthPayloads(data: AuthPayloadUpdateInput!, where: AuthPayloadWhereInput): BatchPayload!
  updateManyAccounts(data: AccountUpdateInput!, where: AccountWhereInput): BatchPayload!
  updateManyRoles(data: RoleUpdateInput!, where: RoleWhereInput): BatchPayload!
  updateManyDomains(data: DomainUpdateInput!, where: DomainWhereInput): BatchPayload!
  deleteManyAuthPayloads(where: AuthPayloadWhereInput): BatchPayload!
  deleteManyAccounts(where: AccountWhereInput): BatchPayload!
  deleteManyRoles(where: RoleWhereInput): BatchPayload!
  deleteManyDomains(where: DomainWhereInput): BatchPayload!
}

enum MutationType {
  CREATED
  UPDATED
  DELETED
}

"""An object with an ID"""
interface Node {
  """The id of the object."""
  id: ID!
}

"""Information about pagination in a connection."""
type PageInfo {
  """When paginating forwards, are there more items?"""
  hasNextPage: Boolean!

  """When paginating backwards, are there more items?"""
  hasPreviousPage: Boolean!

  """When paginating backwards, the cursor to continue."""
  startCursor: String

  """When paginating forwards, the cursor to continue."""
  endCursor: String
}

type Query {
  authPayloads(where: AuthPayloadWhereInput, orderBy: AuthPayloadOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [AuthPayload]!
  accounts(where: AccountWhereInput, orderBy: AccountOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Account]!
  roles(where: RoleWhereInput, orderBy: RoleOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Role]!
  domains(where: DomainWhereInput, orderBy: DomainOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Domain]!
  account(where: AccountWhereUniqueInput!): Account
  role(where: RoleWhereUniqueInput!): Role
  domain(where: DomainWhereUniqueInput!): Domain
  authPayloadsConnection(where: AuthPayloadWhereInput, orderBy: AuthPayloadOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): AuthPayloadConnection!
  accountsConnection(where: AccountWhereInput, orderBy: AccountOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): AccountConnection!
  rolesConnection(where: RoleWhereInput, orderBy: RoleOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): RoleConnection!
  domainsConnection(where: DomainWhereInput, orderBy: DomainOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): DomainConnection!

  """Fetches an object given its ID"""
  node(
    """The ID of an object"""
    id: ID!
  ): Node
}

type Role implements Node {
  id: ID!
  role: Roles
  desc: String
}

"""A connection to a list of items."""
type RoleConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [RoleEdge]!
  aggregate: AggregateRole!
}

input RoleCreateInput {
  role: Roles
  desc: String
}

input RoleCreateManyInput {
  create: [RoleCreateInput!]
  connect: [RoleWhereUniqueInput!]
}

"""An edge in a connection."""
type RoleEdge {
  """The item at the end of the edge."""
  node: Role!

  """A cursor for use in pagination."""
  cursor: String!
}

enum RoleOrderByInput {
  id_ASC
  id_DESC
  role_ASC
  role_DESC
  desc_ASC
  desc_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type RolePreviousValues {
  id: ID!
  role: Roles
  desc: String
}

enum Roles {
  REGULAR
  PREMIUM
  ADMIN
}

type RoleSubscriptionPayload {
  mutation: MutationType!
  node: Role
  updatedFields: [String!]
  previousValues: RolePreviousValues
}

input RoleSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [RoleSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [RoleSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [RoleSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: RoleWhereInput
}

input RoleUpdateDataInput {
  role: Roles
  desc: String
}

input RoleUpdateInput {
  role: Roles
  desc: String
}

input RoleUpdateManyInput {
  create: [RoleCreateInput!]
  connect: [RoleWhereUniqueInput!]
  disconnect: [RoleWhereUniqueInput!]
  delete: [RoleWhereUniqueInput!]
  update: [RoleUpdateWithWhereUniqueNestedInput!]
  upsert: [RoleUpsertWithWhereUniqueNestedInput!]
}

input RoleUpdateWithWhereUniqueNestedInput {
  where: RoleWhereUniqueInput!
  data: RoleUpdateDataInput!
}

input RoleUpsertWithWhereUniqueNestedInput {
  where: RoleWhereUniqueInput!
  update: RoleUpdateDataInput!
  create: RoleCreateInput!
}

input RoleWhereInput {
  """Logical AND on all given filters."""
  AND: [RoleWhereInput!]

  """Logical OR on all given filters."""
  OR: [RoleWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [RoleWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  role: Roles

  """All values that are not equal to given value."""
  role_not: Roles

  """All values that are contained in given list."""
  role_in: [Roles!]

  """All values that are not contained in given list."""
  role_not_in: [Roles!]
  desc: String

  """All values that are not equal to given value."""
  desc_not: String

  """All values that are contained in given list."""
  desc_in: [String!]

  """All values that are not contained in given list."""
  desc_not_in: [String!]

  """All values less than the given value."""
  desc_lt: String

  """All values less than or equal the given value."""
  desc_lte: String

  """All values greater than the given value."""
  desc_gt: String

  """All values greater than or equal the given value."""
  desc_gte: String

  """All values containing the given string."""
  desc_contains: String

  """All values not containing the given string."""
  desc_not_contains: String

  """All values starting with the given string."""
  desc_starts_with: String

  """All values not starting with the given string."""
  desc_not_starts_with: String

  """All values ending with the given string."""
  desc_ends_with: String

  """All values not ending with the given string."""
  desc_not_ends_with: String
}

input RoleWhereUniqueInput {
  id: ID
}

enum State {
  ACTIVE
  INACTIVE
  DISABLED
  FLAGGED
  BANNED
}

type Subscription {
  authPayload(where: AuthPayloadSubscriptionWhereInput): AuthPayloadSubscriptionPayload
  account(where: AccountSubscriptionWhereInput): AccountSubscriptionPayload
  role(where: RoleSubscriptionWhereInput): RoleSubscriptionPayload
  domain(where: DomainSubscriptionWhereInput): DomainSubscriptionPayload
}
