# import * from './generated/prisma.graphql'


type Query {
    # User specific
    accountByEmail( email: String! ): Account

    # Admin/App specific
    allAccounts: [Account!]!
    accountById( id: ID! ): Account
    accountByProfileId( profileID: ID! ): Account
    accountsByRole( role: Roles ): [Account!]!
    accountsByType( accountType: AccountType ): [Account!]!
    accountsByCountry( country: String! ): [Account!]!
    allStates: [State!]!
    roleById( id: ID! ): Role
    allRoles: [Role!]!
    allAccountTypes: [AccountType!]!
    accountExists(email: String!): Account  
}

type Mutation {
    # User specific
    register(email: String!, password: String!, profileId: ID): AuthPayload
    login(email: String!, password: String!, rememberMe: Boolean!): AuthPayload
    refresh(email: String!, refreshToken: String!): AuthPayload

    # Admin/App specific
    createAccountConnect(email: String!, password: String!, state: State!, accountType: AccountType!, country: String, roles: [ID!], profileId: ID!): Account
    createAccountCreate(email: String!, password: String!, state: State!, accountType: AccountType!, country: String, roles: [ID!]!, profileId: ID!): Account
    updateAccount(accountId: ID!, email: String, password: String, rememberMe: Boolean, state: State, accountType: AccountType, country: String, roleId: ID): Account
    removeAccount(id: ID, email: String): Account
    setProfileToAccount(accountId: ID!, profileID: ID!): Account
    createRole(role: Roles!, desc: String!): Role
    updateState(accountId: ID!, state: State!): Account
    flagAccount(accountId: ID!): Account
    banAccount(accountId: ID!): Account
}


type AuthPayload {
  token: String
  refreshToken: String
  account: Account
  status: String
}


# type Account {
#     id: ID!
#     email: String!
#     profileID: ID
# }